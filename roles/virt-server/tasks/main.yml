#
# make sure you have virtio-win repo installed by using either of the following:
# role: config-local-virtio-win-repos
# role: config-virtio-win-repos
# 
---
- name: validate cpu architecture supports virtualization
  ansible.builtin.shell: egrep '^flags.*(vmx|svm)' /proc/cpuinfo
  register: cpuinfo

- name: show cpuinfo
  ansible.builtin.debug:
    var: cpuinfo.stdout_lines
  failed_when: "'vmx' not in cpuinfo.stdout and 'svm' not in cpuinfo.stdout"

- name: create /etc/polkit-1/localauthority/50-local.d/ directory
  ansible.builtin.file:
    path: /etc/polkit-1/localauthority/50-local.d/
    state: directory
    owner: root
    group: polkitd
    mode: 0750

# 
# This breaks with luks dm-mapper
# #
#- name: create vm storage in {{vm_storage_path}}
#  ansible.builtin.lvol:
#    vg: "{{ vm_storage_vg }}"
#    lv: "{{ vm_storage_lv }}"
#    size: "{{ vm_storage_lv_size }}"
#    shrink: no
#    force: no
#    state: present
#    resizefs: yes
#
# this is a problem when using luks encryption because ansible sees fs as 
# "cryptoLuks" and wants to reformat it even though it is actually xfs 
# hence ignore_errors=yes
#- name: Create a {{vm_storage_fs_type}}  filesystem on {{ vm_storage_lv }}
#  ansible.builtin.filesystem:
#    fstype: "{{ vm_storage_fs_type }}"
#    dev: "/dev/{{vm_storage_vg}}/{{vm_storage_lv}}"
#    force: no
#  ignore_errors: yes 
#
#- name: mount {{vm_storage_path}}
#  ansible.builtin.mount:
#    path: "{{ vm_storage_path }}"
#    src: "/dev/{{vm_storage_vg}}/{{vm_storage_lv}}"
#    fstype: "{{ vm_storage_fs_type }}"
#    opts: defaults
##    state: mounted

- name: Install RHEL/CentOS Packages
  ansible.builtin.yum: 
    name: qemu-kvm, virt-manager, virt-viewer, virt-install, libvirt, libvirt-client, virt-what, libguestfs, python3-lxml
    state: latest

- name: virtio-win
  ansible.builtin.yum: 
    name: virtio-win
    state: latest

- name: start and enable libvirtd service
  ansible.builtin.service:
    name: "{{item}}"
    state: started
    enabled: yes
  with_items:
    - libvirtd
    - virtnetworkd

- name: validate kvm modules loaded properly
  ansible.builtin.shell: lsmod |grep kvm
  register: lsmod_output

- name: show lsmod_output
  ansible.builtin.debug:
    var: lsmod_output.stdout_lines
  failed_when: "'kvm_intel' not in lsmod_output.stdout and 'kvm_amd' not in cpuinfo.stdout"

- name: Adding user {{ libvirt_users }} to {{libvirt_groups}}
  ansible.builtin.user:
    name={{ item }}
    groups={{libvirt_groups}}
    append=yes
  with_items:
    - "{{ libvirt_users }}"

- name: setup virtual networks
  block:
    - name: define nets
      community.libvirt.virt_net:
        command: define
        name: "{{item}}"
        xml: '{{ lookup("template", "{{item}}.j2") }}'
      ignore_errors: yes # set because module fails if network already exists
      with_items:
        - "{{virt_nets}}"

    - name: create nets
      community.libvirt.virt_net:
        command: create
        name: "{{item}}"
      ignore_errors: yes #set because module fails if network already exists
      with_items:
        - "{{virt_nets}}"

    - name: set nets for autostart
      community.libvirt.virt_net:
        name: "{{item}}"
        autostart: yes
      with_items:
        - "{{virt_nets}}"

    - name: add virt_nets to trusted firewall zone
      ansible.builtin.firewalld: 
        zone: "{{trusted_firewall_zone}}"
        interface: "{{item}}"
        permanent: yes
        immediate: yes
        state: enabled
      with_items:
        - "{{ virt_nets}}"
  tags: config_virtual_networks

- name: restore SELinux Context on /etc/yum.repos.d
  ansible.builtin.command: restorecon -RFv /etc/yum.repos.d

...
