---
- name: include tower_creds
  include_vars:
    file: tower_creds.yml

- name: create directories
  ansible.builtin.file:
    name: "{{item}}"
    state: directory
    owner: "{{ansible_user}}"
    group: "{{ansible_user}}"
    mode: 0755
  with_items:
    - "{{tower_install_dir}}"
    - "{{tower_install_dir}}/scripts"
    - "{{tower_install_dir}}/logs"

- name: install yum-config-manager
  ansible.builtin.package:
    name: yum-utils
    state: present

- name: get tower installation installation archive
  ansible.builtin.get_url:
    url: https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-{{my_tower_version}}.tar.gz
    dest: "{{tower_install_dir}}/ansible-tower-setup-{{my_tower_version}}.tar.gz"
    mode: 0644

- name: install EPEL Repository
  ansible.builtin.package:
    name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    state: latest
  when:
    - ansible_distribution == "RedHat" or ansible_distribution == "CentOS"
    - ansible_distribution_major_version == "7"


- name: Add rhel-6-server-ansible-2-rpms repository
  ansible.builtin.command: yum-config-manager --enable rhel-6-server-ansible-2-rpms
  when: ansible_distribution_major_version == "6"

- name: Add rhel-7-server-ansible-2-rpms repository
  ansible.builtin.command: yum-config-manager --enable rhel-7-server-ansible-2-rpms
  when: ansible_distribution_major_version == "7"

- name: Add ansible-2-for-rhel-8-x86_64-rpms repository
  ansible.builtin.command: yum-config-manager --enable ansible-2-for-rhel-8-x86_64-rpms
  when: ansible_distribution_major_version == "8"

- name: install ansible
  ansible.builtin.package:
    name: ansible
    state: latest


- name: install tar command
  ansible.builtin.package:
    name: tar
    state: latest
  when:
    - ansible_distribution == "RedHat" or ansible_distribution == "CentOS"
    - ansible_distribution_major_version == "8"

- name: unpack tower installation archive
  ansible.builtin.unarchive:
    src: "{{tower_install_dir}}/ansible-tower-setup-{{my_tower_version}}.tar.gz"
    dest: "{{tower_install_dir}}"
    remote_src: yes
    creates: "{{tower_install_dir}}/ansible-tower-setup-{{my_tower_version}}"

- name: setup tower inventory file
  ansible.builtin.template:
    src: tower-standalone-inventory.j2
    dest: "{{tower_install_dir}}/ansible-tower-setup-{{my_tower_version}}/inventory"
    owner: "{{ansible_user_id}}"
    group: "{{ansible_user_id}}"
    mode: 0600

- name: copy backup file to tower server
  ansible.builtin.copy:
    src: tower-backup-latest.tar.gz
    dest: "{{tower_install_dir}}/ansible-tower-setup-{{my_tower_version}}/tower-backup-latest.tar.gz"
    owner: "{{ansible_user_id}}"
    group: "{{ansible_user_id}}"
    mode: 0644

- name: copy scripts to tower server
  ansible.builtin.copy:
    src: "{{item}}"
    dest: "{{tower_install_dir}}/scripts/{{item}}"
    owner: "{{ansible_user_id}}"
    group: "{{ansible_user_id}}"
    mode: 0755
  with_items:
    - callback-example.sh
    - get-tower.sh
    - get-tower-bundle.sh
    - ldapsearch.sh
    - post.sh
    - venv.sh

- name: setup tower upgrade, backup, and cleanup scripts
  ansible.builtin.template:
    src: "{{item}}.j2"
    dest: "{{tower_install_dir}}/scripts/{{item}}"
    owner: "{{ansible_user_id}}"
    group: "{{ansible_user_id}}"
    mode: 0755
  with_items:
    - tower-backup.sh
    - tower-cleanup.sh
    - upgrade_boto3_ansible_venv.sh
    - upgrade_boto3_tower_venv.sh

- name: create crontab entry to take a nightly backup of tower
  ansible.builtin.cron:
    name: "Nightly Tower Backup"
    user: "root"
    minute: "0"
    hour: "0"
    job: "{{tower_install_dir}}/scripts/tower-backup.sh- > {{tower_install_dir}}/logs/ansible-tower-setup-{{my_tower_version}}/backup.log 2>&1"

- name: create crontab entry to cleanup tower backups nightly
  ansible.builtin.cron:
    name: "Nightly Tower Backup Cleanup"
    user: "root"
    minute: "0"
    hour: "0"
    job: "{{tower_install_dir}}/scripts/tower-cleanup.sh > {{tower_install_dir}}/logs/ansible-tower-setup-{{my_tower_version}}/cleanup.log 2>&1"

- name: make sure firewalld is running and enabled
  ansible.builtin.service:
    name: firewalld
    state: started
    enabled: yes

- name: open firewall ports for tower
  ansible.builtin.firewalld:
    zone: public
    service: "{{item}}"
    immediate: yes
    state: enabled
    permanent: yes
  with_items:
    - https

- name: setup python2-pip
  ansible.builtin.yum:
    name: python2-pip
    state: latest
  when:
    - ansible_distribution == "RedHat" or ansible_distribution == "CentOS"
    - ansible_distribution_major_version <= "7"

- name: setup python3-pip
  ansible.builtin.yum:
    name: python3-pip
    state: latest
  when:
    - ansible_distribution == "RedHat" or ansible_distribution == "CentOS"
    - ansible_distribution_major_version == "8"


- name: setup boto3 for python2 system
  ansible.builtin.command: pip install boto3 --upgrade
  become: true
  when: ansible_python.version.major == 2

- name: setup boto3 for python3 system
  ansible.builtin.command: pip3 install boto3 --upgrade
  become: true
  when: ansible_python.version.major == 3

#- name: downgrade urllib3 on RHEL8
#  ansible.builtin.command: pip3 install urllib3==1.24
#  become: true
#  when: 
#    - ansible_python.version.major == 3
#    - ansible_distribution_major_version == 8

#- name: setup ansible tower via setup.sh
#  ansible.builtin.command: "./setup.sh"
#  args:
#    chdir: "{{tower_install_dir}}/ansible-tower-setup-{{my_tower_version}}"
#  become: true

#- name: setup boto3 for ansible venv
#  ansible.builtin.command: "{{tower_install_dir}}/scripts/upgrade_boto3_ansible_venv.sh"
#  become: true

#- name: setup boto3 for tower venv
#  ansible.builtin.command: "{{tower_install_dir}}/scripts/upgrade_boto3_tower_venv.sh"
#  become: true

#- name: restore ansible tower via "setup.sh -r"
#  ansible.builtin.command: "{{tower_install_dir}}/ansible-tower-setup-{{my_tower_version}}/setup.sh -r {{tower_install_dir}}/ansible-tower-setup-{{my_tower_version}}/ansible-tower-latest.tar.gz"
#  become: true

#- name: restore ansible tower via "setup.sh -r"
#  ansible.builtin.command: "./setup.sh -r ansible-tower-latest.tar.gz"
#  args:
#    chdir: "{{tower_install_dir}}/ansible-tower-setup-{{my_tower_version}}"
#  become: true

- name: Unconditionally reboot the machine with all defaults
  ansible.builtin.reboot:
  become: true
...
