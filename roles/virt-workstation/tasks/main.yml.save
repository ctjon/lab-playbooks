---
- name: validate cpu architecture supports virtualization
  shell: egrep '^flags.*(vmx|svm)' /proc/cpuinfo
  register: cpuinfo

- name: show cpuinfo
  debug:
    var: cpuinfo.stdout_lines
  failed_when: "'vmx' not in cpuinfo.stdout and 'svm' not in cpuinfo.stdout"

- name: Adding user {{ libvirt_users }} to {{libvirt_group}}
  user:
    name={{ item }}
    groups={{libvirt_group}}
    append=yes
  with_items:
    - "{{ libvirt_users }}"

- name: create /etc/polkit-1/localauthority/50-local.d/ directory
  file:
    path: /etc/polkit-1/localauthority/50-local.d/
    state: directory
    owner: root
    group: polkitd
    mode: 0750

- name: install 50-net.tjon-libvirt-remote-access.pkla
  template:
    src: 50-net.tjon-libvirt-remote-access.pkla.j2
    dest: /etc/polkit-1/localauthority/50-local.d/50-net.tjon-libvirt-remote-access.pkla
    owner: root
    group: polkitd
    mode: 0640
  register: polkit_result

- name: reset selinux permissions on /etc/polkit-1/localauthority
  command: restorecon -RF /etc/polkit-1/localauthority

- name: restart polkit service
  service:
    name: polkit
    state: restarted
  when: "polkit_result.changed == true"

- name: create vm storage in /var/lib/libvirt/images
  lvol:
    vg: "{{ vm_storage_vg }}"
    lv: "{{ vm_storage_lv }}"
    size: "{{ vm_storage_lv_size }}"
    shrink: no
    resizefs: yes

- name: Create a ext4 filesystem on {{ vm_storage_lv }}
  filesystem:
    fstype: "{{ vm_storage_fs_type }}"
    dev: "/dev/{{vm_storage_vg}}/{{vm_storage_lv}}"
    force: no
    resizefs: yes

- name: mount {{vm_storage_path}}
  mount:
    path: "{{ vm_storage_path }}"
    src: "/dev/{{vm_storage_vg}}/{{vm_storage_lv}}"
    fstype: "{{ vm_storage_fs_type }}"
    opts: defaults,x-systemd.device-timeout=0
    state: mounted

- name: Install Packages
  package:
    name: python3-libvirt, python3-lxml, libvirt, virt-install, virt-viewer, virt-manager, virt-manager-common, guestfs-browser, libguestfs-tools, python-libguestfs, virt-top, edk2-ovmf, efibootmgr
    state: latest

- name: start and enable libvirtd service
  service:
    name: libvirtd
    state: started
    enabled: yes

- name: validate kvm modules loaded properly
  shell: lsmod |grep kvm
  register: lsmod_output

- name: show lsmod_output
  debug:
    var: lsmod_output.stdout_lines
  failed_when: "'kvm_intel' not in lsmod_output.stdout and 'kvm_amd' not in cpuinfo.stdout"

- name: unset autostart for the default network
  virt_net:
    name: default
    autostart: no

- name: stop the default network
  virt_net:
    name: default
    command: destroy
  ignore_errors: true   # Evidently not idempotent, errors when net is absent

- name: add virt_users to libvirt group
  user: name={{ item }}
        groups=libvirt
        append=yes
  with_items:
    - "{{virt_users}}"

- name: define macvtap-{{vm_bridge_interface}}
  virt_net:
    command: define
    name: macvtap-{{vm_bridge_interface}}
    xml: '{{ lookup("template", "macvtap.xml.j2") }}'

- name: start macvtap-{{vm_bridge_interface}} network
  virt_net:
    command: create
    name: macvtap-{{vm_bridge_interface}}
  ignore_errors: true   # Evidently not idempotent, errors when net is active

- name: define isolated network to talk to kvm host
  virt_net:
    command: define
    name: isolated
    xml: '{{ lookup("file", "isolated.xml") }}'

- name: start isolated network
  virt_net:
    command: create
    name: isolated
  ignore_errors: true   # Evidently not idempotent, errors when net is active

- name:  list available networks
  virt_net:
    command: list_nets
  register: vnets

- name: display vnets
  debug:
    var: vnets

- name: install virtio-win rpms
  package:
    name: virtio-win
    state: latest

...
