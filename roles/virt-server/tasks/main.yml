---
- name: validate cpu architecture supports virtualization
  ansible.builtin.shell: egrep '^flags.*(vmx|svm)' /proc/cpuinfo
  register: cpuinfo

- name: show cpuinfo
  ansible.builtin.debug:
    var: cpuinfo.stdout_lines
  failed_when: "'vmx' not in cpuinfo.stdout and 'svm' not in cpuinfo.stdout"

- name: create /etc/polkit-1/localauthority/50-local.d/ directory
  ansible.builtin.file:
    path: /etc/polkit-1/localauthority/50-local.d/
    state: directory
    owner: root
    group: polkitd
    mode: 0750

#- name: install 50-net.tjon-libvirt-remote-access.pkla
#  ansible.builtin.template:
#    src: 50-net.tjon-libvirt-remote-access.pkla.j2
#    dest: /etc/polkit-1/localauthority/50-local.d/50-net.tjon-libvirt-remote-access.pkla
#    owner: root
#    group: polkitd
#    mode: 0640
#  register: polkit_result

#- name: reset selinux permissions on /etc/polkit-1/localauthority
#  ansible.builtin.command: restorecon -RF /etc/polkit-1/localauthority

#- name: restart polkit service
#  ansible.builtin.service:
#    name: polkit
#    state: restarted
#  when: "polkit_result.changed == true"

- name: create vm storage in {{vm_storage_path}}
  ansible.builtin.lvol:
    vg: "{{ vm_storage_vg }}"
    lv: "{{ vm_storage_lv }}"
    size: "{{ vm_storage_lv_size }}"
    shrink: no
    state: present
    resizefs: yes

- name: Create a ext4 filesystem on {{ vm_storage_lv }}
  ansible.builtin.filesystem:
    fstype: "{{ vm_storage_fs_type }}"
    dev: "/dev/{{vm_storage_vg}}/{{vm_storage_lv}}"
    force: no
    resizefs: yes

- name: mount {{vm_storage_path}}
  ansible.builtin.mount:
    path: "{{ vm_storage_path }}"
    src: "/dev/{{vm_storage_vg}}/{{vm_storage_lv}}"
    fstype: "{{ vm_storage_fs_type }}"
    opts: defaults,x-systemd.device-timeout=0
    state: mounted

- name: Download virtio repo configuration
  ansible.builtin.get_url:
    url: https://fedorapeople.org/groups/virt/virtio-win/virtio-win.repo
    dest: /etc/yum.repos.d/virtio-win.repo
    mode: '0644'

- name: Install RHEL/CentOS Packages
  ansible.builtin.yum: 
    name: qemu-kvm, virt-manager, virt-viewer, virt-install, libvirt, libvirt-client, virt-what, libguestfs, virtio-win, python3-lxml
    state: latest


- name: start and enable libvirtd service
  ansible.builtin.service:
    name: libvirtd
    state: restarted
    enabled: yes

#- name: start and enable libvirtd service
#  ansible.builtin.command: systemctl restart libvirtd
#  args:
#    warn: false # set warn=false to avoid warnings about yum command/module

- name: validate kvm modules loaded properly
  ansible.builtin.shell: lsmod |grep kvm
  register: lsmod_output

- name: show lsmod_output
  ansible.builtin.debug:
    var: lsmod_output.stdout_lines
  failed_when: "'kvm_intel' not in lsmod_output.stdout and 'kvm_amd' not in cpuinfo.stdout"

- name: destroy default net
  ansible.builtin.command: virsh net-destroy default
  ignore_errors: yes

- name: undefine default net
  ansible.builtin.command: virsh net-undefine default
  ignore_errors: yes

- name: Adding user {{ libvirt_users }} to {{libvirt_groups}}
  ansible.builtin.user:
    name={{ item }}
    groups={{libvirt_groups}}
    append=yes
  with_items:
    - "{{ libvirt_users }}"

#- name: add libvirt_users to libvirt group
#  ansible.builtin.user: name={{ item }}
#        groups=libvirt
#        append=yes
#  with_items:
#    - "{{libvirt_users}}"

- name: setup virtual networks
  block:
    - name: define nets
      ansible.builtin.virt_net:
        command: define
        name: "{{item}}"
        xml: '{{ lookup("template", "{{item}}.j2") }}'
      ignore_errors: yes # set because module fails if network already exists
      with_items:
        - "{{virt_nets}}"

    - name: create nets
      ansible.builtin.virt_net:
        command: create
        name: "{{item}}"
      ignore_errors: yes #set because module fails if network already exists
      with_items:
        - "{{virt_nets}}"

    - name: set nets for autostart
      ansible.builtin.virt_net:
        name: "{{item}}"
        autostart: yes
      with_items:
        - "{{virt_nets}}"

    - name: add virt_nets to internal firewall zone
      ansible.builtin.firewalld: 
        zone: internal
        interface: "{{item}}"
        permanent: yes
        immediate: yes
        state: enabled
      with_items:
        - "{{ virt_nets}}"
#  when: ansible_hostname == "p51s" or ansible_hostname == "x1carbon"

- name: restore SELinux Context on /etc/yum.repos.d
  ansible.builtin.command: restorecon -RFv /etc/yum.repos.d

- name: install virtio-win rpms
  ansible.builtin.package:
    name: virtio-win
    state: latest

...
