---

- name: synchronize /usr/share/syslinux content to {{tftpbootdir}}
  ansible.builtin.synchronize:
    src: "/usr/share/syslinux/"
    dest: "{{tftpbootdir}}"
    archive: yes
    delete: yes
    links: yes
    recursive: yes
    times: yes
    rsync_opts: 
      - "--exclude=pxelinux.cfg"
      - "--exclude=images"
  delegate_to: "{{ inventory_hostname }}"

- name: create {{tftpbootdir}}/{pxelinux.cfg,images} directories
  ansible.builtin.file:
    path: "{{tftpbootdir}}/{{item}}"
    owner: root
    group: root
    mode: 0755
    state: directory
  with_items:
    - images
    - pxelinux.cfg

- name: deploy {{tftpbootdir}}/pxelinux.cfg/default
  ansible.builtin.copy:
    src: default
    dest: "{{tftpbootdir}}/pxelinux.cfg/default"
    owner: root
    group: root
    mode: 0644

- name: create {{tftpbootdir}}/pxelinux.cfg/Linux directory
  ansible.builtin.file:
    path: "{{tftpbootdir}}/pxelinux.cfg/Linux"
    owner: root
    group: root
    mode: 0755
    state: directory

- name: deploy {{tftpbootdir}}/pxelinux.cfg/Linux Files
  ansible.builtin.template:
    src: "{{item}}.j2"
    dest: "{{tftpbootdir}}/pxelinux.cfg/Linux/{{item}}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "{{pxelinux_files}}"

- name: create /root/logs directory
  ansible.builtin.file:
    path: "/root/logs"
    owner: root
    group: root
    mode: 0700
    state: directory

- name: create crontab entry to restart tftp server hourly because it stops?
  ansible.builtin.cron:
    name: "Restart TFTP"
    user: "root"
    minute: "0"
    hour: "*"
    job: "/usr/bin/systemctl restart tftp > /root/logs/restart-tftp.log 2>&1"


################################################################################
# RHEL images Files copies                                                     #
################################################################################
- name: create RHEL {{tftpbootdir}}/images/linux/rhel/version/arch directories
  ansible.builtin.file:
    path: "{{tftpbootdir}}/images/rhel/{{item[0]}}/{{item[1]}}"
    owner: root
    group: root
    mode: 0755
    state: directory
    recurse: yes
  with_nested:
    - "{{rhel_versions}}"
    - "{{rhel_architectures}}"

- name: synchronize RHEL pxeboot content to {{tftpbootdir}}/images/rhel
  ansible.builtin.synchronize:
    src: "{{install_dir}}/Linux/rhel/{{item[0]}}/{{item[1]}}/images/pxeboot/"
    dest: "{{tftpbootdir}}/images/rhel/{{item[0]}}/{{item[1]}}/"
    links: yes
    times: yes
  delegate_to: "{{ inventory_hostname }}"
  with_nested:
    - "{{centos_versions}}"
    - "{{centos_architectures}}"

- name: copy CentOS 7- BOOTX64.EFI to {{tftpbootdir}}/images/centos
  ansible.builtin.copy:
    src: "{{install_dir}}/Linux/centos/{{item[0]}}/os/{{item[1]}}/EFI/BOOT/BOOTX64.EFI"
    dest: "{{tftpbootdir}}/images/centos/{{item[0]}}/{{item[1]}}/"
    owner: root
    group: root
    remote_src: yes
  with_nested:
    - "{{centos_versions}}"
    - "{{centos_architectures}}"

- name: copy CentOS 7- grubx64.efi to {{tftpbootdir}}/images/centos
  ansible.builtin.copy:
    src: "{{install_dir}}/Linux/centos/{{item[0]}}/os/{{item[1]}}/EFI/BOOT/grubx64.efi"
    dest: "{{tftpbootdir}}/images/centos/{{item[0]}}/{{item[1]}}/"
    owner: root
    group: root
    remote_src: yes
  with_nested:
    - "{{centos_versions}}"
    - "{{centos_architectures}}"

- name: synchronize CentOS content to {{tftpbootdir}}/images/centos
  ansible.builtin.synchronize:
    src: "{{install_dir}}/Linux/centos/{{item[0]}}/BaseOS/{{item[1]}}/os/images/pxeboot/"
    dest: "{{tftpbootdir}}/images/centos/{{item[0]}}/{{item[1]}}/"
    archive: yes
    delete: yes
    links: yes
    times: yes
  delegate_to: "{{ inventory_hostname }}"
  with_nested:
    - "{{centos_stream_versions}}"
    - "{{centos_stream_architectures}}"

- name: copy CentOS 8-stream+ BOOTX64.EFI to {{tftpbootdir}}/images/centos
  ansible.builtin.copy:
    src: "{{install_dir}}/Linux/centos/{{item[0]}}/BaseOS/{{item[1]}}/os/EFI/BOOT/BOOTX64.EFI"
    dest: "{{tftpbootdir}}/images/centos/{{item[0]}}/{{item[1]}}/"
    owner: root
    group: root
    remote_src: yes
  with_nested:
    - "{{centos_stream_versions}}"
    - "{{centos_stream_architectures}}"

- name: copy CentOS 8-stream+ grubx64.efi to {{tftpbootdir}}/images/centos
  ansible.builtin.copy:
    src: "{{install_dir}}/Linux/centos/{{item[0]}}/BaseOS/{{item[1]}}/os/EFI/BOOT/grubx64.efi"
    dest: "{{tftpbootdir}}/images/centos/{{item[0]}}/{{item[1]}}/"
    owner: root
    group: root
    remote_src: yes
  with_nested:
    - "{{centos_stream_versions}}"
    - "{{centos_stream_architectures}}"

################################################################################
# Fedora images Files copies                                                   #
################################################################################
- name: create Fedora {{tftpbootdir}}/images/linux/fedora/version/arch directories
  ansible.builtin.file:
    path: "{{tftpbootdir}}/images/fedora/{{item[0]}}/{{item[1]}}"
    owner: root
    group: root
    mode: 0755
    state: directory
    recurse: yes
  with_nested:
    - "{{fedora_versions}}"
    - "{{fedora_architectures}}"

- name: synchronize Fedora pxeboot content to {{tftpbootdir}}/images/fedora
  ansible.builtin.synchronize:
    src: "{{install_dir}}/Linux/fedora/releases/{{item[0]}}/Everything/{{item[1]}}/os/images/pxeboot/"
    dest: "{{tftpbootdir}}/images/fedora/{{item[0]}}/{{item[1]}}/"
    archive: yes
    delete: yes
    links: yes
    times: yes
  delegate_to: "{{ inventory_hostname }}"
  with_nested:
    - "{{fedora_versions}}"
    - "{{fedora_architectures}}"

- name: synchronize Fedora BOOTX64.EFI to {{tftpbootdir}}/images/fedora
  ansible.builtin.synchronize:
    src: "{{install_dir}}/Linux/fedora/releases/{{item}}/Everything/x86_64/os/EFI/BOOT/BOOTX64.EFI"
    dest: "{{tftpbootdir}}/images/fedora/{{item}}/x86_64/"
    archive: yes
    delete: yes
    links: yes
    times: yes
  delegate_to: "{{ inventory_hostname }}"
  with_items:
    - "{{fedora_versions}}"

- name: synchronize Fedora grubx64.efi to {{tftpbootdir}}/images/fedora
  ansible.builtin.synchronize:
    src: "{{install_dir}}/Linux/fedora/releases/{{item}}/Everything/x86_64/os/EFI/BOOT/grubx64.efi"
    dest: "{{tftpbootdir}}/images/fedora/{{item}}/x86_64/"
    archive: yes
    delete: yes
    links: yes
    times: yes
  delegate_to: "{{ inventory_hostname }}"
  with_items:
    - "{{fedora_versions}}"

################################################################################
# Ubuntu images Files copies                                                   #
################################################################################
#- name: create {{tftpbootdir}}/images/ubuntu/server/version/architeture directory
#  ansible.builtin.file:
#    path: "{{tftpbootdir}}/images/ubuntu/server/{{item[0]}}/{{item[1]}}/"
#    owner: root
#    group: root
#    mode: 0755
#    state: directory
#    recurse: yes
#  with_nested:
#    - "{{ubuntu_server_versions}}"
#    - "{{ubuntu_server_architectures}}"

#- name: synchronize Ubuntu Server netboot content to {{tftpbootdir}}/images/ubuntu
#  ansible.builtin.synchronize:
#    src: "{{install_dir}}/Linux/ubuntu/server/{{item[0]}}/{{item[1]}}/install/netboot/ubuntu-installer/{{item[1]}}/"
#    dest: "{{tftpbootdir}}/images/ubuntu/server/{{item[0]}}/{{item[1]}}/"
#    archive: yes
#    delete: yes
#    links: yes
#    times: yes
#  delegate_to: "{{ inventory_hostname }}"
#  with_nested:
#    - "{{ubuntu_server_versions}}"
#    - "{{ubuntu_server_architectures}}"

################################################################################
# OpenWRT images Files copies                                                  #
################################################################################
#- name: setup OpenWRT PXE Environment
#  block:
#    - name: create OpenWRT {{tftpbootdir}}/images/openwrt directory
#      ansible.builtin.file:
#        path: "{{tftpbootdir}}/images/openwrt"
#        owner: root
#        group: root
#        mode: 0755
#        state: directory
#        recurse: yes
#      when: ansible_hostname == "server0"
#
#    - name: synchronize OpenWRT image content to {{tftpbootdir}}/images/openwrt
#      ansible.builtin.synchronize:
#        src: "{{archive_dir}}/OpenWRT/images/"
#        dest: "{{tftpbootdir}}/images/openwrt"
#        archive: yes
#        delete: yes
#        links: yes
#        times: yes
#      delegate_to: "{{ inventory_hostname }}"
#  when: ansible_hostname == "server0"


################################################################################
# OpenBSD images Files copies                                                  #
################################################################################
- name: create OpenBSD {{tftpbootdir}}/images/openbsd/architecture directories
  ansible.builtin.file:
    path: "{{tftpbootdir}}/images/openbsd/{{item}}"
    owner: root
    group: root
    mode: 0755
    state: directory
    recurse: yes
  with_items:
    - "{{openbsd_versions}}"

################################################################################
# vmware images Files copies                                                   #
################################################################################
- name: setup vmware network boot on server0
  block:
    - name: create vmware {{tftpbootdir}}/images/linux/rhel/architecture directories
      ansible.builtin.file:
        path: "{{tftpbootdir}}/images/vmware/{{item}}"
        owner: root
        group: root
        mode: 0755
        state: directory
        recurse: yes
      with_items:
        - "{{vmware_versions}}"
  when: ansible_hostname == "server0"

################################################################################
# windows images Files copies                                                  #
################################################################################
- name: Setup Windows PXE Environment
  block:
    - name: create {{tftpbootdir}}/pxelinux.cfg/Windos directory
      ansible.builtin.file:
        path: "{{tftpbootdir}}/pxelinux.cfg/Windows"
        owner: root
        group: root
        mode: 0755
        state: directory

    - name: deploy {{tftpbootdir}}/pxelinux.cfg/Windows Files
      ansible.builtin.template:
        src: "{{item}}.j2"
        dest: "{{tftpbootdir}}/pxelinux.cfg/Windows/{{item}}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - "{{pxewindows_files}}"

    - name: create windows {{tftpbootdir}}/images/windows/10/amd64 directory
      ansible.builtin.file:
        path: "{{tftpbootdir}}/images/windows/10/amd64"
        owner: root
        group: root
        mode: 0755
        recurse: yes

    - name: copy WinPE_amd64.iso to {{tftpbootdir}}/images/windows/10/amd64
      ansible.builtin.copy:
        src: "{{archive_dir}}/Windows/Microsoft/WinPE/WinPE_amd64.iso"
        dest: "{{tftpbootdir}}/images/windows/10/amd64"
        owner: root
        group: root
        remote_src: yes
      delegate_to: "{{ inventory_hostname }}"
    
    - name: create {{doc_files_dir}}
      ansible.builtin.file:
        path: "{{ doc_files_dir }}"
        state: directory
        owner: "{{ repo_owner }}"
        group: "{{ repo_owner }}"
        mode: '0755'

    - name: deploy {{config_files_dir}}/net_use_for_winpe_pxe.txt
      ansible.builtin.copy:
        src: net_use_for_winpe_pxe.txt
        dest: "{{ doc_files_dir }}/"
        owner: "{{ repo_owner }}"
        group: "{{ repo_owner }}"
        mode: 0644
  when: ansible_hostname == "server0"

################################################################################
# Restore selinux context for newly copied files                               #
################################################################################
- name: restore selinux context for {{tftpbootdir}}
  ansible.builtin.command: "restorecon -RFv {{tftpbootdir}}"

################################################################################
# Deploy kickstart configuration files                                         #
################################################################################
- name: make sure {{ks_config_dir}} exists
  ansible.builtin.file:
    path: "{{ks_config_dir}}"
    state: directory
    owner: {{user_name}}
    group: {{group_name}}
    mode: 0755

- name: deploy {{ks_config_dir}} Files
  ansible.builtin.template:
    src: "ks-configs/{{item}}.j2"
    dest: "{{ks_config_dir}}/{{item}}"
    owner: {{user_name}}
    group: {{group_name}}
    mode: 0644
  with_items:
    - "{{ks_configs_list}}"

- name: deploy callback-service templates to {{config_files_url}} Files
  ansible.builtin.template:
    src: "{{item}}.j2"
    dest: "{{config_files_dir}}/{{item}}"
    owner: {{user_name}}
    group: {{group_name}}
    mode: 0755
  with_items:
    - rhel6-callback-service.sh
    - rhel7-callback.service

- name: restore selinux context for {{ks_config_dir}}
  ansible.builtin.command: "restorecon -RFv {{ks_config_dir}}"
  tags: restorecon

---

- name: synchronize /usr/share/syslinux content to {{tftpbootdir}}
  ansible.builtin.synchronize:
    src: "/usr/share/syslinux/"
    dest: "{{tftpbootdir}}"
    archive: yes
    delete: yes
    links: yes
    recursive: yes
    times: yes
    rsync_opts: 
      - "--exclude=pxelinux.cfg"
      - "--exclude=images"
  delegate_to: "{{ inventory_hostname }}"

- name: create {{tftpbootdir}}/{pxelinux.cfg,images} directories
  ansible.builtin.file:
    path: "{{tftpbootdir}}/{{item}}"
    owner: root
    group: root
    mode: 0755
    state: directory
  with_items:
    - images
    - pxelinux.cfg

- name: deploy {{tftpbootdir}}/pxelinux.cfg/default
  ansible.builtin.copy:
    src: default
    dest: "{{tftpbootdir}}/pxelinux.cfg/default"
    owner: root
    group: root
    mode: 0644

- name: create {{tftpbootdir}}/pxelinux.cfg/Linux directory
  ansible.builtin.file:
    path: "{{tftpbootdir}}/pxelinux.cfg/Linux"
    owner: root
    group: root
    mode: 0755
    state: directory
